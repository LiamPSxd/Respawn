{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\liami\\\\OneDrive\\\\Escritorio\\\\Semestre 6\\\\Desarrollo de Software\\\\Respawn\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\Users\\\\liami\\\\OneDrive\\\\Escritorio\\\\Semestre 6\\\\Desarrollo de Software\\\\Respawn\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\liami\\\\OneDrive\\\\Escritorio\\\\Semestre 6\\\\Desarrollo de Software\\\\Respawn\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { cloneElement } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { map } from './ElementChildren';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar ROUND_PRECISION = 1000;\n\n/**\r\n * Validate that children, if any, are instances of `ProgressBar`.\r\n */\nfunction onlyProgressBar(props, propName, componentName) {\n  var children = props[propName];\n  if (!children) {\n    return null;\n  }\n  var error = null;\n  React.Children.forEach(children, function (child) {\n    if (error) {\n      return;\n    }\n\n    /**\r\n     * Compare types in a way that works with libraries that patch and proxy\r\n     * components like react-hot-loader.\r\n     *\r\n     * see https://github.com/gaearon/react-hot-loader#checking-element-types\r\n     */\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    var element = /*#__PURE__*/_jsx(ProgressBar, {});\n    if (child.type === element.type) return;\n    var childType = child.type;\n    var childIdentifier = /*#__PURE__*/React.isValidElement(child) ? childType.displayName || childType.name || childType : child;\n    error = new Error(\"Children of \".concat(componentName, \" can contain only ProgressBar \") + \"components. Found \".concat(childIdentifier, \".\"));\n  });\n  return error;\n}\nfunction getPercentage(now, min, max) {\n  var percentage = (now - min) / (max - min) * 100;\n  return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;\n}\nfunction renderProgressBar(_ref, ref) {\n  var _classNames;\n  var min = _ref.min,\n    now = _ref.now,\n    max = _ref.max,\n    label = _ref.label,\n    visuallyHidden = _ref.visuallyHidden,\n    striped = _ref.striped,\n    animated = _ref.animated,\n    className = _ref.className,\n    style = _ref.style,\n    variant = _ref.variant,\n    bsPrefix = _ref.bsPrefix,\n    props = _objectWithoutProperties(_ref, [\"min\", \"now\", \"max\", \"label\", \"visuallyHidden\", \"striped\", \"animated\", \"className\", \"style\", \"variant\", \"bsPrefix\"]);\n  return /*#__PURE__*/_jsx(\"div\", _objectSpread({\n    ref: ref\n  }, props, {\n    role: \"progressbar\",\n    className: classNames(className, \"\".concat(bsPrefix, \"-bar\"), (_classNames = {}, _defineProperty(_classNames, \"bg-\".concat(variant), variant), _defineProperty(_classNames, \"\".concat(bsPrefix, \"-bar-animated\"), animated), _defineProperty(_classNames, \"\".concat(bsPrefix, \"-bar-striped\"), animated || striped), _classNames)),\n    style: _objectSpread({\n      width: \"\".concat(getPercentage(now, min, max), \"%\")\n    }, style),\n    \"aria-valuenow\": now,\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    children: visuallyHidden ? /*#__PURE__*/_jsx(\"span\", {\n      className: \"visually-hidden\",\n      children: label\n    }) : label\n  }));\n}\nvar ProgressBar = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {\n  var _ref2$isChild = _ref2.isChild,\n    isChild = _ref2$isChild === void 0 ? false : _ref2$isChild,\n    rest = _objectWithoutProperties(_ref2, [\"isChild\"]);\n  var props = _objectSpread({\n    min: 0,\n    max: 100,\n    animated: false,\n    visuallyHidden: false,\n    striped: false\n  }, rest);\n  props.bsPrefix = useBootstrapPrefix(props.bsPrefix, 'progress');\n  if (isChild) {\n    return renderProgressBar(props, ref);\n  }\n  var min = props.min,\n    now = props.now,\n    max = props.max,\n    label = props.label,\n    visuallyHidden = props.visuallyHidden,\n    striped = props.striped,\n    animated = props.animated,\n    bsPrefix = props.bsPrefix,\n    variant = props.variant,\n    className = props.className,\n    children = props.children,\n    wrapperProps = _objectWithoutProperties(props, [\"min\", \"now\", \"max\", \"label\", \"visuallyHidden\", \"striped\", \"animated\", \"bsPrefix\", \"variant\", \"className\", \"children\"]);\n  return /*#__PURE__*/_jsx(\"div\", _objectSpread({\n    ref: ref\n  }, wrapperProps, {\n    className: classNames(className, bsPrefix),\n    children: children ? map(children, function (child) {\n      return /*#__PURE__*/cloneElement(child, {\n        isChild: true\n      });\n    }) : renderProgressBar({\n      min: min,\n      now: now,\n      max: max,\n      label: label,\n      visuallyHidden: visuallyHidden,\n      striped: striped,\n      animated: animated,\n      bsPrefix: bsPrefix,\n      variant: variant\n    }, ref)\n  }));\n});\nProgressBar.displayName = 'ProgressBar';\nexport default ProgressBar;","map":null,"metadata":{},"sourceType":"module"}